{"version":3,"file":"component---src-templates-category-tsx-8ca1bb975858b072a824.js","mappings":"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","sources":["webpack://hushes/./src/components/Posts/style.ts","webpack://hushes/./src/components/Posts/index.tsx","webpack://hushes/./src/components/Sidebar/BlogSidebar.tsx","webpack://hushes/./src/hooks/useGetTaxonomies.ts","webpack://hushes/./src/components/Sidebar/style.ts","webpack://hushes/./src/templates/category.tsx"],"sourcesContent":["import { Link } from 'gatsby'\nimport styled from 'styled-components'\nimport { GlobalSection } from '../../styles/components/global'\n\nexport const PostSection = styled(GlobalSection)``\n\nexport const PostLink = styled(Link)`\n  display: grid;\n  grid-template-columns: 1fr 100px;\n  gap: 1.5rem;\n  padding: 0;\n  margin: 1.6rem 0;\n  background: transparent;\n  text-decoration: none;\n\n  &:hover {\n    color: ${(props) => props.theme.fontColorBright};\n    text-decoration: underline;\n  }\n`\n\nexport const PostTime = styled.time`\n  display: block;\n  margin-left: auto;\n  font-family: ${(props) => props.theme.fontFamilyMonospace};\n  color: ${(props) => props.theme.postTimeColor};\n  font-size: 0.8rem;\n  font-weight: 500;\n`\nexport const PostH5 = styled.h5`\n  margin: 0;\n  font-size: 0.9rem;\n  color: ${(props) => props.theme.fontColorHeading};\n  font-weight: 500;\n  font-family: ${(props) => props.theme.fontFamilyBase};\n  line-height: 1.3;\n\n  @media screen and (min-width: 700px) {\n    font-size: 1rem;\n    font-weight: 600;\n  }\n`\n\nexport const PostYear = styled.h2`\n  color: ${(props) => props.theme.year};\n  padding-bottom: 0.8rem;\n`\n","import React, { useMemo } from 'react'\n\nimport { PostH5, PostLink, PostSection, PostTime, PostYear } from './style'\n\n/**\n * @description 文章列表\n */\n\nexport const Posts = ({ data = [], prefix }: { data: SimplifiedData[]; prefix?: string }) => {\n  const postsByYear = useMemo(() => {\n    const collection: YearListData = {}\n\n    data.forEach((post) => {\n      const year = post.date?.split(', ')[1]\n\n      collection[year] = [...(collection[year] || []), post]\n    })\n\n    return collection\n  }, [data])\n\n  const years = useMemo(() => Object.keys(postsByYear).reverse(), [postsByYear])\n\n  return (\n    <>\n      {years.map((year) => (\n        <PostSection key={year}>\n          <PostYear>{year}</PostYear>\n          <div>\n            {postsByYear[year].map((node: SimplifiedData) => (\n              <PostLink to={prefix ? `/${prefix}${node.slug}` : node.slug} key={node.id}>\n                <PostH5>{node.title}</PostH5>\n                <PostTime>{node.date.replace(/,\\s\\d{4}/, '')}</PostTime>\n              </PostLink>\n            ))}\n          </div>\n        </PostSection>\n      ))}\n    </>\n  )\n}\n","import React from 'react'\r\nimport { SideCard, SideLink, SideSticky, SideTag, SideTags, SideTitle, SlidLinkCount } from './style'\r\n\r\nimport { useGetTaxonomies } from '../../hooks/useGetTaxonomies'\r\nimport { slugify } from '../../utils/helpers'\r\n\r\n/**\r\n * @description 归档页面 - 侧边类别、标签信息\r\n */\r\n\r\nexport const BlogSidebar = () => {\r\n  const data = useGetTaxonomies()\r\n  const categories = data.categories.group\r\n  const tags = data.tags.group\r\n\r\n  return (\r\n    <>\r\n      <aside>\r\n        <SideSticky>\r\n          <SideCard>\r\n            <SideTitle>类别</SideTitle>\r\n            <div>\r\n              {categories\r\n                .filter((category) => category.name !== 'Highlight')\r\n                .map((category) => {\r\n                  return (\r\n                    <SideLink key={category.name} to={`/categories/${slugify(category.name)}`} activeClassName=\"active\">\r\n                      <div>{category.name}</div>\r\n                      <SlidLinkCount>{category.totalCount}</SlidLinkCount>\r\n                    </SideLink>\r\n                  )\r\n                })}\r\n            </div>\r\n          </SideCard>\r\n\r\n          <SideCard>\r\n            <SideTitle>标签</SideTitle>\r\n            <SideTags>\r\n              {tags.map((tag) => {\r\n                return (\r\n                  <SideTag key={tag.name} to={`/tags/${slugify(tag.name)}`} activeClassName=\"active\">\r\n                    {tag.name}\r\n                  </SideTag>\r\n                )\r\n              })}\r\n            </SideTags>\r\n          </SideCard>\r\n        </SideSticky>\r\n      </aside>\r\n    </>\r\n  )\r\n}\r\n","import { graphql, useStaticQuery } from 'gatsby'\n\nexport const useGetTaxonomies = (): SideData => {\n  const data = useStaticQuery(graphql`\n    query TaxonomyQuery {\n      tags: allMarkdownRemark {\n        group(field: frontmatter___tags) {\n          name: fieldValue\n          totalCount\n        }\n      }\n\n      categories: allMarkdownRemark {\n        group(field: frontmatter___categories) {\n          name: fieldValue\n          totalCount\n        }\n      }\n    }\n  `)\n\n  return data\n}\n","import { Link } from 'gatsby'\nimport Img from 'gatsby-image'\nimport styled from 'styled-components'\n\nexport const SideSticky = styled.div.attrs((props: { top: number }) => ({\n  top: `${props.top || 8}rem`,\n}))`\n  position: sticky;\n  top: ${(props) => props.top};\n`\n\nexport const SideCard = styled.div`\n  background: ${(props) => props.theme.cardBackgroundColor};\n  padding: 1.25rem;\n  border-radius: ${(props) => props.theme.borderRadius};\n  margin: 2rem 0;\n`\n\nexport const SideTitle = styled.h2`\n  color: ${(props) => props.theme.fontColorMuted};\n  font-size: 0.9rem;\n  border: none;\n  margin: 0 0 1rem !important;\n  text-transform: uppercase;\n  font-weight: 700;\n`\n\nexport const SideLink = styled(Link)`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  text-decoration: none;\n  background-color: transparent;\n  border-radius: ${(props) => props.theme.borderRadius};\n  color: ${(props) => props.theme.fontColorBase};\n  font-size: 0.9rem;\n  font-weight: 600;\n  margin-bottom: 0.6rem;\n  padding: 0.1rem 0.3rem;\n\n  &:last-child {\n    margin-bottom: 0rem;\n  }\n\n  &.active {\n    background: ${(props) => props.theme.highlightColor};\n    color: white;\n    div {\n      color: white;\n    }\n  }\n\n  &:hover {\n    background: ${(props) => props.theme.highlightColor};\n    color: white;\n    text-decoration: none;\n    div {\n      color: white;\n    }\n  }\n`\n\nexport const SlidLinkCount = styled.div`\n  font-weight: 400;\n  font-size: 0.8rem;\n  color: ${(props) => props.theme.fontColorMuted};\n  font-family: ${(props) => props.theme.fontFamilyMonospace};\n`\n\nexport const SideTags = styled.div`\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  gap: 0.8rem 0.6rem;\n`\n\nexport const SideTag = styled(Link)`\n  line-height: 22px;\n  font-size: 0.75rem;\n  font-weight: 400;\n  padding: 0rem 0.5rem 0.05rem 0.5rem;\n  border: 1px solid ${(props) => props.theme.borderColor};\n  border-radius: ${(props) => props.theme.borderRadius};\n  color: ${(props) => props.theme.fontColorBase};\n  background: ${(props) => props.theme.buttonBackgroundColor} !important;\n  text-decoration: none;\n  text-transform: capitalize;\n  display: inline-block;\n  text-align: center;\n\n  &.active {\n    background: ${(props) => props.theme.highlightColor} !important;\n    border-color: ${(props) => props.theme.highlightColor} !important;\n    color: white !important;\n    font-weight: 600;\n  }\n\n  &:hover {\n    color: ${(props) => props.theme.fontColorBright};\n    border-color: ${(props) => props.theme.borderColorHover};\n    text-decoration: none;\n  }\n`\n\nexport const PostSideImage = styled(Img)`\n  margin: 0 auto;\n  margin-top: 2rem;\n  text-align: center;\n  display: block !important;\n`\n","import { graphql, PageProps } from 'gatsby'\nimport React, { useMemo } from 'react'\nimport Helmet from 'react-helmet'\nimport { BriefHeader } from '../components/BriefHeader'\nimport { BlogSidebar } from '../components/Sidebar/BlogSidebar'\n\nimport { Posts } from '../components/Posts'\nimport { SEO } from '../components/SEO'\nimport { Layout } from '../layout/index'\nimport { GlobalContainer } from '../styles/components/global'\nimport { TemplateContent, TemplateGrid } from '../styles/components/templates'\nimport config from '../utils/config'\nimport { getSimplifiedPosts } from '../utils/helpers'\nimport { CategoryPage, CategoryPageVariables } from './__generated__/CategoryPage'\n\n/**\n * @description  类别 页面\n * @date 17/10/2022\n * @export\n * @param {PageProps<CategoryPage, CategoryPageVariables>} { data, pageContext }\n * @return {*}\n */\nexport default function CategoryTemplate({ data, pageContext }: PageProps<CategoryPage, CategoryPageVariables>) {\n  const { category } = pageContext\n  const { totalCount } = data.allMarkdownRemark\n  const posts = data.allMarkdownRemark.edges\n  const simplifiedPosts = useMemo(() => getSimplifiedPosts(posts), [posts])\n  const message = totalCount === 1 ? ' post categorized as:' : ' posts categorized as:'\n\n  return (\n    <>\n      <Helmet title={`${category} | ${config.siteTitle}`} />\n      <SEO />\n\n      <GlobalContainer as=\"header\">\n        <TemplateGrid>\n          <TemplateContent>\n            {/* <BriefHeader highlight={totalCount} subTitle={message} title={category} /> */}\n            <Posts data={simplifiedPosts} />\n          </TemplateContent>\n          <BlogSidebar />\n        </TemplateGrid>\n      </GlobalContainer>\n    </>\n  )\n}\n\nCategoryTemplate.Layout = Layout\n\nexport const pageQuery = graphql`\n  query CategoryPage($category: String) {\n    allMarkdownRemark(\n      sort: { order: DESC, fields: [frontmatter___date] }\n      filter: { frontmatter: { categories: { in: [$category] } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          id\n          fields {\n            slug\n          }\n          frontmatter {\n            title\n            date(formatString: \"MMMM DD, YYYY\")\n            tags\n            categories\n          }\n        }\n      }\n    }\n  }\n`\n"],"names":["PostSection","styled","GlobalSection","withConfig","PostLink","Link","props","theme","fontColorBright","PostTime","fontFamilyMonospace","postTimeColor","PostH5","fontColorHeading","fontFamilyBase","PostYear","year","Posts","data","prefix","postsByYear","useMemo","collection","forEach","post","date","_post$date","split","years","Object","keys","reverse","React","map","key","node","to","slug","id","title","replace","BlogSidebar","useStaticQuery","categories","group","tags","SideSticky","SideCard","SideTitle","filter","category","name","SideLink","slugify","activeClassName","SlidLinkCount","totalCount","SideTags","tag","SideTag","top","cardBackgroundColor","borderRadius","fontColorMuted","fontColorBase","highlightColor","borderColor","buttonBackgroundColor","borderColorHover","PostSideImage","Img","CategoryTemplate","pageContext","posts","allMarkdownRemark","edges","simplifiedPosts","getSimplifiedPosts","Helmet","config","SEO","GlobalContainer","as","TemplateGrid","TemplateContent","Layout"],"sourceRoot":""}