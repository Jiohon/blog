{"version":3,"file":"component---src-pages-blog-tsx-2650f790ab4d98c1ae9a.js","mappings":"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","sources":["webpack://hushes/./src/components/BlogSidebar.tsx","webpack://hushes/./src/hooks/useGetTaxonomies.ts","webpack://hushes/./src/components/BlogContainer.tsx","webpack://hushes/./src/components/Posts.tsx","webpack://hushes/./src/pages/blog.tsx"],"sourcesContent":["import { Link } from 'gatsby'\r\nimport React from 'react'\r\n\r\nimport { useGetTaxonomies } from '../hooks/useGetTaxonomies'\r\nimport { slugify } from '../utils/helpers'\r\n\r\n/**\r\n * @description 归档页面 - 侧边类别、标签信息\r\n */\r\n\r\nexport const Sidebar = () => {\r\n  const data = useGetTaxonomies()\r\n  const categories = data.categories.group\r\n  const tags = data.tags.group\r\n\r\n  return (\r\n    <>\r\n      <aside className=\"post-sidebar\">\r\n        <div className=\"post-sidebar-card\">\r\n          <h2>类别</h2>\r\n          <div className=\"list\">\r\n            {categories\r\n              .filter((category) => category.name !== 'Highlight')\r\n              .map((category) => {\r\n                return (\r\n                  <Link\r\n                    key={category.name}\r\n                    to={`/categories/${slugify(category.name)}`}\r\n                    className=\"category\"\r\n                    activeClassName=\"active\"\r\n                  >\r\n                    <div className=\"name\">{category.name}</div>\r\n                    <div className=\"count\">{category.totalCount}</div>\r\n                  </Link>\r\n                )\r\n              })}\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"post-sidebar-card\">\r\n          <h2>标签</h2>\r\n          <div className=\"tags\">\r\n            {tags.map((tag) => {\r\n              return (\r\n                <Link key={tag.name} to={`/tags/${slugify(tag.name)}`} className=\"tag\" activeClassName=\"active\">\r\n                  {tag.name}\r\n                </Link>\r\n              )\r\n            })}\r\n          </div>\r\n        </div>\r\n      </aside>\r\n    </>\r\n  )\r\n}\r\n","import { graphql, useStaticQuery } from 'gatsby'\n\nexport const useGetTaxonomies = (): SideData => {\n  const data = useStaticQuery(graphql`\n    query TaxonomyQuery {\n      tags: allMarkdownRemark {\n        group(field: frontmatter___tags) {\n          name: fieldValue\n          totalCount\n        }\n      }\n\n      categories: allMarkdownRemark {\n        group(field: frontmatter___categories) {\n          name: fieldValue\n          totalCount\n        }\n      }\n    }\n  `)\n\n  return data\n}\n","import React from 'react'\n\nimport { Sidebar } from './BlogSidebar'\n\ninterface Props {\n  children?: React.ReactNode\n}\n\n/**\n * @description\n */\n\nexport const BlogContainer = ({ children }: Props) => {\n  return (\n    <section className=\"container markdown-content\">\n      <div className=\"grid\">\n        <div className=\"article-content\">{children}</div>\n        <div className=\"sidebar-content\">\n          <Sidebar />\n        </div>\n      </div>\n    </section>\n  )\n}\n","import { Link } from 'gatsby'\nimport React, { useMemo } from 'react'\n\n/**\n * @description 文章组件-item\n */\n\nconst Post = ({ node, prefix }: { node: SimplifiedData; prefix?: string }) => {\n  let formattedDate\n\n  if (node.date) {\n    const dateArr = node.date.split(' ')\n    dateArr.pop()\n\n    dateArr[0] = dateArr[0].slice(0, 3)\n    formattedDate = dateArr.join(' ').slice(0, -1)\n  }\n\n  return (\n    <Link to={prefix ? `/${prefix}${node.slug}` : node.slug} key={node.id} className=\"post\">\n      <h5>{node.title}</h5>\n      <time>{formattedDate}</time>\n    </Link>\n  )\n}\n\n/**\n * @description 文章列表\n */\n\nexport const Posts = ({ data = [], prefix }: { data: SimplifiedData[]; prefix?: string }) => {\n  const postsByYear = useMemo(() => {\n    const collection: YearListData = {}\n\n    data.forEach((post) => {\n      const year = post.date?.split(', ')[1]\n\n      collection[year] = [...(collection[year] || []), post]\n    })\n\n    return collection\n  }, [data])\n\n  const years = useMemo(() => Object.keys(postsByYear).reverse(), [postsByYear])\n\n  return (\n    <>\n      {years.map((year) => (\n        <section key={year} className=\"segment\">\n          <h2 className=\"year\">{year}</h2>\n          <div className=\"posts\">\n            {postsByYear[year].map((node: SimplifiedData) => (\n              <Post key={node.id} node={node} prefix={prefix} />\n            ))}\n          </div>\n        </section>\n      ))}\n    </>\n  )\n}\n","import { graphql } from 'gatsby'\nimport React, { useMemo } from 'react'\nimport Helmet from 'react-helmet'\n\nimport { BlogContainer } from '../components/BlogContainer'\nimport { Posts } from '../components/Posts'\nimport { SEO } from '../components/SEO'\nimport { BlogQueryQuery } from '../typings/graphql-type'\nimport config from '../utils/config'\nimport { getSimplifiedPosts } from '../utils/helpers'\n\nexport default function Blog({ data }: { data: BlogQueryQuery }) {\n  const posts = data.posts.edges\n  const simplifiedPosts = useMemo<SimplifiedData[]>(() => getSimplifiedPosts(posts), [posts])\n  const title = '文章归档'\n  const description = 'Notes & tutorials'\n  return (\n    <div>\n      <Helmet title={`${title} | ${config.siteTitle}`} />\n      <SEO customDescription={description} />\n\n      <BlogContainer>\n        <header className=\"hero\">\n          <h1>{title}</h1>\n        </header>\n        <Posts data={simplifiedPosts} />\n      </BlogContainer>\n    </div>\n  )\n}\n\nexport const blogQuery = graphql`\n  query BlogQuery {\n    posts: allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { template: { eq: \"post\" } } }\n    ) {\n      edges {\n        node {\n          id\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n            tags\n            categories\n          }\n        }\n      }\n    }\n  }\n`\n"],"names":["Sidebar","data","useStaticQuery","categories","group","tags","React","className","filter","category","name","map","Link","key","to","slugify","activeClassName","totalCount","tag","BlogContainer","children","Post","formattedDate","node","prefix","date","dateArr","split","pop","slice","join","slug","id","title","Posts","postsByYear","useMemo","collection","forEach","post","year","_post$date","years","Object","keys","reverse","Blog","posts","edges","simplifiedPosts","getSimplifiedPosts","Helmet","config","SEO","customDescription"],"sourceRoot":""}