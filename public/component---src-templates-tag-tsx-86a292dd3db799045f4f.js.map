{"version":3,"file":"component---src-templates-tag-tsx-86a292dd3db799045f4f.js","mappings":"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","sources":["webpack://hushes/./src/components/BriefHeader/style.ts","webpack://hushes/./src/components/BriefHeader/index.tsx","webpack://hushes/./src/components/Posts/style.ts","webpack://hushes/./src/components/Posts/index.tsx","webpack://hushes/./src/components/Sidebar/BlogSidebar.tsx","webpack://hushes/./src/hooks/useGetTaxonomies.ts","webpack://hushes/./src/components/Sidebar/style.ts","webpack://hushes/./src/templates/tag.tsx","webpack://hushes/./src/utils/helpers.ts"],"sourcesContent":["import styled from 'styled-components'\n\nexport const BriefHeader = styled.header`\n  position: relative;\n  overflow: hidden;\n  width: 100%;\n  padding: 0.5rem 0;\n  position: relative;\n  @media screen and (min-width: 700px) {\n    padding: 2.5rem 0 0.5rem;\n    &.index {\n      padding: 3rem 0 0 0;\n    }\n  }\n`\n\nexport const BriefSubTitle = styled.div`\n  color: ${(props) => props.theme.fontColorMuted};\n  font-weight: 500;\n  font-size: 1rem;\n  margin-bottom: 0.4rem;\n`\n\nexport const BriefTitle = styled.h1`\n  font-size: 1.5rem;\n  line-height: 1.1;\n  font-weight: 700;\n  letter-spacing: -0.06rem;\n  color: ${(props) => props.theme.fontColorHeading};\n  margin: 0 !important;\n\n  @media screen and (min-width: 700px) {\n    font-size: 2rem;\n    letter-spacing: -0.08rem;\n  }\n`\n\nexport const BriefPurpleTitle = styled.span`\n  color: ${(props) => props.theme.highlightColor};\n`\n","import React from 'react'\nimport { BriefHeader as Header, BriefPurpleTitle as PurpleTitle, BriefSubTitle, BriefTitle } from './style'\n\ninterface Props {\n  title?: string | null\n  highlight?: number\n  subTitle?: string\n  children?: React.ReactNode\n  index?: boolean\n}\n\n/**\n * @description 大标题\n */\n\nexport const BriefHeader = ({ highlight, subTitle, title, children, index }: Props) => {\n  return (\n    <Header className={index ? 'index' : ''}>\n      {subTitle && (\n        <BriefSubTitle>\n          {highlight && <PurpleTitle>{highlight}</PurpleTitle>}\n          {subTitle}\n        </BriefSubTitle>\n      )}\n      {title && <BriefTitle>{title}</BriefTitle>}\n      {children && children}\n    </Header>\n  )\n}\n","import { Link } from 'gatsby'\nimport styled from 'styled-components'\nimport { GlobalSection } from '../../styles/components/global'\n\nexport const PostSection = styled(GlobalSection)``\n\nexport const PostLink = styled(Link)`\n  display: grid;\n  grid-template-columns: 1fr 100px;\n  gap: 1.5rem;\n  padding: 0;\n  margin: 1.6rem 0;\n  background: transparent;\n  text-decoration: none;\n\n  &:hover {\n    color: ${(props) => props.theme.fontColorBright};\n    text-decoration: underline;\n  }\n`\n\nexport const PostTime = styled.time`\n  display: block;\n  margin-left: auto;\n  font-family: ${(props) => props.theme.fontFamilyMonospace};\n  color: ${(props) => props.theme.postTimeColor};\n  font-size: 0.8rem;\n  font-weight: 500;\n`\nexport const PostH5 = styled.h5`\n  margin: 0;\n  font-size: 0.9rem;\n  color: ${(props) => props.theme.fontColorHeading};\n  font-weight: 500;\n  font-family: ${(props) => props.theme.fontFamilyBase};\n  line-height: 1.3;\n\n  @media screen and (min-width: 700px) {\n    font-size: 1rem;\n    font-weight: 600;\n  }\n`\n\nexport const PostYear = styled.h2`\n  color: ${(props) => props.theme.year};\n  padding-bottom: 0.8rem;\n`\n","import React, { useMemo } from 'react'\n\nimport { PostH5, PostLink, PostSection, PostTime, PostYear } from './style'\n\n/**\n * @description 文章列表\n */\n\nexport const Posts = ({ data = [], prefix }: { data: SimplifiedData[]; prefix?: string }) => {\n  const postsByYear = useMemo(() => {\n    const collection: YearListData = {}\n\n    data.forEach((post) => {\n      const year = post.date?.split(', ')[1]\n\n      collection[year] = [...(collection[year] || []), post]\n    })\n\n    return collection\n  }, [data])\n\n  const years = useMemo(() => Object.keys(postsByYear).reverse(), [postsByYear])\n\n  return (\n    <>\n      {years.map((year) => (\n        <PostSection key={year}>\n          <PostYear>{year}</PostYear>\n          <div>\n            {postsByYear[year].map((node: SimplifiedData) => (\n              <PostLink to={prefix ? `/${prefix}${node.slug}` : node.slug} key={node.id}>\n                <PostH5>{node.title}</PostH5>\n                <PostTime>{node.date.replace(/,\\s\\d{4}/, '')}</PostTime>\n              </PostLink>\n            ))}\n          </div>\n        </PostSection>\n      ))}\n    </>\n  )\n}\n","import React from 'react'\r\nimport { SideCard, SideLink, SideSticky, SideTag, SideTags, SideTitle, SlidLinkCount } from './style'\r\n\r\nimport { useGetTaxonomies } from '../../hooks/useGetTaxonomies'\r\nimport { slugify } from '../../utils/helpers'\r\n\r\n/**\r\n * @description 归档页面 - 侧边类别、标签信息\r\n */\r\n\r\nexport const BlogSidebar = () => {\r\n  const data = useGetTaxonomies()\r\n  const categories = data.categories.group\r\n  const tags = data.tags.group\r\n\r\n  return (\r\n    <>\r\n      <aside>\r\n        <SideSticky>\r\n          <SideCard>\r\n            <SideTitle>类别</SideTitle>\r\n            <div>\r\n              {categories\r\n                .filter((category) => category.name !== 'Highlight')\r\n                .map((category) => {\r\n                  return (\r\n                    <SideLink key={category.name} to={`/categories/${slugify(category.name)}`} activeClassName=\"active\">\r\n                      <div>{category.name}</div>\r\n                      <SlidLinkCount>{category.totalCount}</SlidLinkCount>\r\n                    </SideLink>\r\n                  )\r\n                })}\r\n            </div>\r\n          </SideCard>\r\n\r\n          <SideCard>\r\n            <SideTitle>标签</SideTitle>\r\n            <SideTags>\r\n              {tags.map((tag) => {\r\n                return (\r\n                  <SideTag key={tag.name} to={`/tags/${slugify(tag.name)}`} activeClassName=\"active\">\r\n                    {tag.name}\r\n                  </SideTag>\r\n                )\r\n              })}\r\n            </SideTags>\r\n          </SideCard>\r\n        </SideSticky>\r\n      </aside>\r\n    </>\r\n  )\r\n}\r\n","import { graphql, useStaticQuery } from 'gatsby'\n\nexport const useGetTaxonomies = (): SideData => {\n  const data = useStaticQuery(graphql`\n    query TaxonomyQuery {\n      tags: allMarkdownRemark {\n        group(field: frontmatter___tags) {\n          name: fieldValue\n          totalCount\n        }\n      }\n\n      categories: allMarkdownRemark {\n        group(field: frontmatter___categories) {\n          name: fieldValue\n          totalCount\n        }\n      }\n    }\n  `)\n\n  return data\n}\n","import { Link } from 'gatsby'\nimport Img from 'gatsby-image'\nimport styled from 'styled-components'\n\nexport const SideSticky = styled.div.attrs((props: { top: number }) => ({\n  top: `${props.top || 8}rem`,\n}))`\n  position: sticky;\n  top: ${(props) => props.top};\n`\n\nexport const SideCard = styled.div`\n  background: ${(props) => props.theme.cardBackgroundColor};\n  padding: 1.25rem;\n  border-radius: ${(props) => props.theme.borderRadius};\n  margin: 2rem 0;\n`\n\nexport const SideTitle = styled.h2`\n  color: ${(props) => props.theme.fontColorMuted};\n  font-size: 0.9rem;\n  border: none;\n  margin: 0 0 1rem !important;\n  text-transform: uppercase;\n  font-weight: 700;\n`\n\nexport const SideLink = styled(Link)`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  text-decoration: none;\n  background-color: transparent;\n  border-radius: ${(props) => props.theme.borderRadius};\n  color: ${(props) => props.theme.fontColorBase};\n  font-size: 0.9rem;\n  font-weight: 600;\n  margin-bottom: 0.6rem;\n  padding: 0.1rem 0.3rem;\n\n  &:last-child {\n    margin-bottom: 0rem;\n  }\n\n  &.active {\n    background: ${(props) => props.theme.highlightColor};\n    color: white;\n    div {\n      color: white;\n    }\n  }\n\n  &:hover {\n    background: ${(props) => props.theme.highlightColor};\n    color: white;\n    text-decoration: none;\n    div {\n      color: white;\n    }\n  }\n`\n\nexport const SlidLinkCount = styled.div`\n  font-weight: 400;\n  font-size: 0.8rem;\n  color: ${(props) => props.theme.fontColorMuted};\n  font-family: ${(props) => props.theme.fontFamilyMonospace};\n`\n\nexport const SideTags = styled.div`\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  gap: 0.8rem 0.6rem;\n`\n\nexport const SideTag = styled(Link)`\n  line-height: 22px;\n  font-size: 0.75rem;\n  font-weight: 400;\n  padding: 0rem 0.5rem 0.05rem 0.5rem;\n  border: 1px solid ${(props) => props.theme.borderColor};\n  border-radius: ${(props) => props.theme.borderRadius};\n  color: ${(props) => props.theme.fontColorBase};\n  background: ${(props) => props.theme.buttonBackgroundColor} !important;\n  text-decoration: none;\n  text-transform: capitalize;\n  display: inline-block;\n  text-align: center;\n\n  &.active {\n    background: ${(props) => props.theme.highlightColor} !important;\n    border-color: ${(props) => props.theme.highlightColor} !important;\n    color: white !important;\n    font-weight: 600;\n  }\n\n  &:hover {\n    color: ${(props) => props.theme.fontColorBright};\n    border-color: ${(props) => props.theme.borderColorHover};\n    text-decoration: none;\n  }\n`\n\nexport const PostSideImage = styled(Img)`\n  margin: 0 auto;\n  margin-top: 2rem;\n  text-align: center;\n  display: block !important;\n`\n","import { graphql, PageProps } from 'gatsby'\nimport React, { useMemo } from 'react'\nimport Helmet from 'react-helmet'\n\nimport { BriefHeader } from '../components/BriefHeader'\nimport { Posts } from '../components/Posts'\nimport { SEO } from '../components/SEO'\nimport { BlogSidebar } from '../components/Sidebar/BlogSidebar'\nimport { Layout } from '../layout/index'\nimport { GlobalContainer } from '../styles/components/global'\nimport { TemplateContent, TemplateGrid } from '../styles/components/templates'\nimport config from '../utils/config'\nimport { getSimplifiedPosts } from '../utils/helpers'\nimport { TagPage, TagPageVariables } from './__generated__/TagPage'\n\n/**\n * @description  标签 页面\n * @date 17/10/2022\n * @export\n * @param {PageProps<TagPage, TagPageVariables>} { data, pageContext }\n * @return {*}\n */\nexport default function TagTemplate({ data, pageContext }: PageProps<TagPage, TagPageVariables>) {\n  const { tag } = pageContext\n  const { totalCount } = data.allMarkdownRemark\n  const posts = data.allMarkdownRemark.edges\n  const simplifiedPosts = useMemo(() => getSimplifiedPosts(posts), [posts])\n  const message = totalCount === 1 ? ' post tagged:' : ' posts tagged:'\n\n  return (\n    <>\n      <Helmet title={`Posts tagged: ${tag} | ${config.siteTitle}`} />\n      <SEO />\n\n      <GlobalContainer as=\"header\">\n        <TemplateGrid>\n          <TemplateContent>\n            <BriefHeader highlight={totalCount} subTitle={message} title={tag} />\n            <Posts data={simplifiedPosts} />\n          </TemplateContent>\n          <BlogSidebar />\n        </TemplateGrid>\n      </GlobalContainer>\n    </>\n  )\n}\n\nTagTemplate.Layout = Layout\n\nexport const pageQuery = graphql`\n  query TagPage($tag: String) {\n    allMarkdownRemark(\n      sort: { order: DESC, fields: [frontmatter___date] }\n      filter: { frontmatter: { tags: { in: [$tag] } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          id\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n            tags\n            categories\n          }\n        }\n      }\n    }\n  }\n`\n","export function getSimplifiedPosts(posts: any[], options: any = {}): SimplifiedData[] {\n  return posts.map((post) => {\n    const { id, frontmatter, fields } = { ...post?.node } as any\n    return {\n      id: id,\n      date: frontmatter?.date,\n      slug: fields?.slug,\n      tags: frontmatter?.tags,\n      categories: frontmatter?.categories,\n      title: options.shortTitle ? frontmatter?.shortTitle : frontmatter?.title,\n      description: frontmatter?.description,\n      ...(options.thumbnails && {\n        thumbnail: frontmatter?.thumbnail?.childImageSharp?.fixed,\n      }),\n    }\n  })\n}\n\nexport function slugify(string: string | (string | null)[]): string {\n  return (\n    string &&\n    `${string}`\n      .match(/[A-Z]{2,}(?=[A-Z][a-z]+[0-9]*|\\b)|[A-Z]?[a-z]+[0-9]*|[A-Z]|[0-9]+/g)!\n      .map((x) => x.toLowerCase())\n      .join('-')\n  )\n}\n\nexport function capitalize(string: string): string {\n  return string.charAt(0).toUpperCase() + string.slice(1)\n}\n"],"names":["BriefHeader","styled","BriefSubTitle","props","theme","fontColorMuted","BriefTitle","fontColorHeading","BriefPurpleTitle","highlightColor","highlight","subTitle","title","children","index","React","Header","className","PurpleTitle","PostSection","GlobalSection","withConfig","PostLink","Link","fontColorBright","PostTime","fontFamilyMonospace","postTimeColor","PostH5","fontFamilyBase","PostYear","year","Posts","data","prefix","postsByYear","useMemo","collection","forEach","post","date","_post$date","split","years","Object","keys","reverse","map","key","node","to","slug","id","replace","BlogSidebar","useStaticQuery","categories","group","tags","SideSticky","SideCard","SideTitle","filter","category","name","SideLink","slugify","activeClassName","SlidLinkCount","totalCount","SideTags","tag","SideTag","top","cardBackgroundColor","borderRadius","fontColorBase","borderColor","buttonBackgroundColor","borderColorHover","PostSideImage","Img","TagTemplate","pageContext","allMarkdownRemark","posts","edges","simplifiedPosts","getSimplifiedPosts","message","Helmet","config","SEO","GlobalContainer","as","TemplateGrid","TemplateContent","Layout","options","frontmatter","fields","shortTitle","description","thumbnails","thumbnail","_frontmatter$thumbnai","childImageSharp","_frontmatter$thumbnai2","fixed","string","match","x","toLowerCase","join"],"sourceRoot":""}