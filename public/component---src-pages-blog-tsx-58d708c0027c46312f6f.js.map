{"version":3,"file":"component---src-pages-blog-tsx-58d708c0027c46312f6f.js","mappings":"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","sources":["webpack://hushes/./src/components/Posts.tsx","webpack://hushes/./src/components/SidebarLayout.tsx","webpack://hushes/./src/hooks/useGetTaxonomies.ts","webpack://hushes/./src/pages/blog.tsx"],"sourcesContent":["import { Link } from 'gatsby'\nimport React, { useMemo } from 'react'\n\n/**\n * @description 文章组件-item\n */\n\nconst Post = ({ node, prefix }: { node: SimplifiedData; prefix?: string }) => {\n  let formattedDate\n\n  if (node.date) {\n    const dateArr = node.date.split(' ')\n    dateArr.pop()\n\n    dateArr[0] = dateArr[0].slice(0, 3)\n    formattedDate = dateArr.join(' ').slice(0, -1)\n  }\n\n  return (\n    <Link to={prefix ? `/${prefix}${node.slug}` : node.slug} key={node.id} className=\"post\">\n      <h5>{node.title}</h5>\n      <time>{formattedDate}</time>\n    </Link>\n  )\n}\n\n/**\n * @description 文章列表\n */\n\nexport const Posts = ({ data = [], prefix }: { data: SimplifiedData[]; prefix?: string }) => {\n  const postsByYear = useMemo(() => {\n    const collection: YearListData = {}\n\n    data.forEach((post) => {\n      const year = post.date?.split(', ')[1]\n\n      collection[year] = [...(collection[year] || []), post]\n    })\n\n    return collection\n  }, [data])\n\n  const years = useMemo(() => Object.keys(postsByYear).reverse(), [postsByYear])\n\n  return (\n    <>\n      {years.map((year) => (\n        <section key={year} className=\"segment\">\n          <h2 className=\"year\">{year}</h2>\n          <div className=\"posts\">\n            {postsByYear[year].map((node: SimplifiedData) => (\n              <Post key={node.id} node={node} prefix={prefix} />\n            ))}\n          </div>\n        </section>\n      ))}\n    </>\n  )\n}\n","import { Link } from 'gatsby'\nimport React from 'react'\n\nimport { useGetTaxonomies } from '../hooks/useGetTaxonomies'\nimport { slugify } from '../utils/helpers'\n\ninterface Props {\n  children?: React.ReactNode\n}\n\n/**\n * @description 归档页面 - 侧边类别、标签信息\n */\n\nconst BlogSidebar = () => {\n  const data = useGetTaxonomies()\n  const categories = data.categories.group\n  const tags = data.tags.group\n\n  return (\n    <aside className=\"post-sidebar\">\n      <div className=\"post-sidebar-card\">\n        <h2>类别</h2>\n        <div className=\"list\">\n          {categories\n            .filter((category) => category.name !== 'Highlight')\n            .map((category) => {\n              return (\n                <Link\n                  key={category.name}\n                  to={`/categories/${slugify(category.name)}`}\n                  className=\"category\"\n                  activeClassName=\"active\"\n                >\n                  <div className=\"name\">{category.name}</div>\n                  <div className=\"count\">{category.totalCount}</div>\n                </Link>\n              )\n            })}\n        </div>\n      </div>\n\n      <div className=\"post-sidebar-card\">\n        <h2>标签</h2>\n        <div className=\"tags\">\n          {tags.map((tag) => {\n            return (\n              <Link key={tag.name} to={`/tags/${slugify(tag.name)}`} className=\"tag\" activeClassName=\"active\">\n                {tag.name}\n              </Link>\n            )\n          })}\n        </div>\n      </div>\n    </aside>\n  )\n}\n\n/**\n * @description 归档页面 - 布局\n */\n\nexport const SidebarLayout = ({ children }: Props) => {\n  return (\n    <section className=\"container markdown-content\">\n      <div className=\"grid\">\n        <div className=\"article-content\">{children}</div>\n        <div className=\"sidebar-content\">\n          <BlogSidebar />\n        </div>\n      </div>\n    </section>\n  )\n}\n","import { graphql, useStaticQuery } from 'gatsby'\n\nexport const useGetTaxonomies = (): SideData => {\n  const data = useStaticQuery(graphql`\n    query TaxonomyQuery {\n      tags: allMarkdownRemark {\n        group(field: frontmatter___tags) {\n          name: fieldValue\n          totalCount\n        }\n      }\n\n      categories: allMarkdownRemark {\n        group(field: frontmatter___categories) {\n          name: fieldValue\n          totalCount\n        }\n      }\n    }\n  `)\n\n  return data\n}\n","import { graphql } from 'gatsby'\nimport React, { useMemo } from 'react'\nimport Helmet from 'react-helmet'\n\nimport { Posts } from '../components/Posts'\nimport { SEO } from '../components/SEO'\nimport { SidebarLayout } from '../components/SidebarLayout'\nimport { BlogQueryQuery } from '../typings/graphql-type'\nimport config from '../utils/config'\nimport { getSimplifiedPosts } from '../utils/helpers'\n\nexport default function Blog({ data }: { data: BlogQueryQuery }) {\n  const posts = data.posts.edges\n  const simplifiedPosts = useMemo<SimplifiedData[]>(() => getSimplifiedPosts(posts), [posts])\n  const title = '文章归档'\n  const description = 'Notes & tutorials'\n  return (\n    <div>\n      <Helmet title={`${title} | ${config.siteTitle}`} />\n      <SEO customDescription={description} />\n\n      <SidebarLayout>\n        <header className=\"hero\">\n          <h1>{title}</h1>\n        </header>\n        <Posts data={simplifiedPosts} />\n      </SidebarLayout>\n    </div>\n  )\n}\n\nexport const blogQuery = graphql`\n  query BlogQuery {\n    posts: allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { template: { eq: \"post\" } } }\n    ) {\n      edges {\n        node {\n          id\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n            tags\n            categories\n          }\n        }\n      }\n    }\n  }\n`\n"],"names":["Post","formattedDate","node","prefix","date","dateArr","split","pop","slice","join","React","Link","to","slug","key","id","className","title","Posts","data","postsByYear","useMemo","collection","forEach","post","year","_post$date","years","Object","keys","reverse","map","BlogSidebar","useStaticQuery","categories","group","tags","filter","category","name","slugify","activeClassName","totalCount","tag","SidebarLayout","children","Blog","posts","edges","simplifiedPosts","getSimplifiedPosts","Helmet","config","SEO","customDescription"],"sourceRoot":""}