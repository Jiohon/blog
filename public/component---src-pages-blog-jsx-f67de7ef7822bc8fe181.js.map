{"version":3,"file":"component---src-pages-blog-jsx-f67de7ef7822bc8fe181.js","mappings":"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","sources":["webpack://hushes/./src/components/Post.jsx","webpack://hushes/./src/components/Posts.jsx","webpack://hushes/./src/components/BlogSidebar.jsx","webpack://hushes/./src/utils/hooks/useGetTaxonomies.js","webpack://hushes/./src/components/SidebarLayout.jsx","webpack://hushes/./src/pages/blog.jsx"],"sourcesContent":["import React from 'react'\nimport { Link } from 'gatsby'\n\n/**\n * @description 文章组件-item\n */\n\nexport const Post = ({ node, prefix }) => {\n  let formattedDate\n\n  if (node.date) {\n    const dateArr = node.date.split(' ')\n    dateArr.pop()\n\n    dateArr[0] = dateArr[0].slice(0, 3)\n    formattedDate = dateArr.join(' ').slice(0, -1)\n  }\n\n  return (\n    <Link to={prefix ? `/${prefix}${node.slug}` : node.slug} key={node.id} className=\"post\">\n      <h5>{node.title}</h5>\n      <time>{formattedDate}</time>\n    </Link>\n  )\n}\n","import React, { useMemo } from 'react'\n\nimport { Post } from './Post'\n\n/**\n * @description 文章列表\n */\n\nexport const Posts = ({ data = [], showYears, query, prefix, hideDate, yearOnly }) => {\n  const postsByYear = useMemo(() => {\n    const collection = {}\n\n    data.forEach((post) => {\n      const year = post.date?.split(', ')[1]\n\n      collection[year] = [...(collection[year] || []), post]\n    })\n\n    return collection\n  }, [data])\n  const years = useMemo(() => Object.keys(postsByYear).reverse(), [postsByYear])\n\n  if (showYears) {\n    return years.map((year) => (\n      <section key={year} className=\"segment\">\n        <h2 className=\"year\">{year}</h2>\n        <div className=\"posts\">\n          {postsByYear[year].map((node) => (\n            <Post key={node.id} node={node} query={query} prefix={prefix} />\n          ))}\n        </div>\n      </section>\n    ))\n  } else {\n    return (\n      <section className=\"segment\">\n        <div className=\"posts\">\n          {data.map((node) => (\n            <Post key={node.id} node={node} query={query} prefix={prefix} hideDate={hideDate} yearOnly={yearOnly} />\n          ))}\n        </div>\n      </section>\n    )\n  }\n}\n","import React from 'react'\nimport { Link } from 'gatsby'\n\nimport { slugify } from '../utils/helpers'\nimport { useGetTaxonomies } from '../utils/hooks/useGetTaxonomies'\n\n/**\n * @description 归档页面 - 侧边类别、标签信息\n */\n\nexport const BlogSidebar = () => {\n  const data = useGetTaxonomies()\n  const categories = data.categories.group\n  const tags = data.tags.group\n\n  return (\n    <aside className=\"post-sidebar\">\n      <div className=\"post-sidebar-card\">\n        <h2>类别</h2>\n        <div className=\"list\">\n          {categories\n            .filter((category) => category.name !== 'Highlight')\n            .map((category) => {\n              return (\n                <Link\n                  key={category.name}\n                  to={`/categories/${slugify(category.name)}`}\n                  className=\"category\"\n                  activeClassName=\"active\"\n                >\n                  <div className=\"name\">{category.name}</div>\n                  <div className=\"count\">{category.totalCount}</div>\n                </Link>\n              )\n            })}\n        </div>\n      </div>\n\n      <div className=\"post-sidebar-card\">\n        <h2>标签</h2>\n        <div className=\"tags\">\n          {tags.map((tag) => {\n            return (\n              <Link key={tag.name} to={`/tags/${slugify(tag.name)}`} className=\"tag\" activeClassName=\"active\">\n                {tag.name}\n              </Link>\n            )\n          })}\n        </div>\n      </div>\n    </aside>\n  )\n}\n","import { useStaticQuery, graphql } from 'gatsby'\n\nexport const useGetTaxonomies = () => {\n  const data = useStaticQuery(graphql`\n    query TaxonomyQuery {\n      tags: allMarkdownRemark {\n        group(field: frontmatter___tags) {\n          name: fieldValue\n          totalCount\n        }\n      }\n\n      categories: allMarkdownRemark {\n        group(field: frontmatter___categories) {\n          name: fieldValue\n          totalCount\n        }\n      }\n    }\n  `)\n\n  return data\n}\n","import React from 'react'\n\nimport { BlogSidebar } from './BlogSidebar'\n\n/**\n * @description 归档页面 - 布局\n */\n\nexport const SidebarLayout = ({ children }) => {\n  return (\n    <section className=\"container markdown-content\">\n      <div className=\"grid\">\n        <div className=\"article-content\">{children}</div>\n        <div className=\"sidebar-content\">\n          <BlogSidebar />\n        </div>\n      </div>\n    </section>\n  )\n}\n","import React, { useMemo } from 'react'\nimport { graphql } from 'gatsby'\nimport Helmet from 'react-helmet'\n\nimport { Layout } from '/src/layout/index'\nimport { Posts } from '/src/components/Posts'\nimport { SEO } from '/src/components/SEO'\nimport { SidebarLayout } from '/src/components/SidebarLayout'\nimport { getSimplifiedPosts } from '/src/utils/helpers'\nimport config from '/src/utils/config'\n\nexport default function Blog({ data }) {\n  const posts = data.posts.edges\n  const simplifiedPosts = useMemo(() => getSimplifiedPosts(posts), [posts])\n  const title = '文章归档'\n  const description = 'Notes & tutorials'\n  return (\n    <div>\n      <Helmet title={`${title} | ${config.siteTitle}`} />\n      <SEO customDescription={description} />\n\n      <SidebarLayout>\n        <header className=\"hero\">\n          <h1>{title}</h1>\n        </header>\n        <Posts data={simplifiedPosts} showYears />\n      </SidebarLayout>\n    </div>\n  )\n}\n\nBlog.Layout = Layout\n\nexport const blogQuery = graphql`\n  query BlogQuery {\n    posts: allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { template: { eq: \"post\" } } }\n    ) {\n      edges {\n        node {\n          id\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n            tags\n            categories\n          }\n        }\n      }\n    }\n  }\n`\n"],"names":["Post","formattedDate","node","prefix","date","dateArr","split","pop","slice","join","Link","to","slug","key","id","className","title","Posts","data","showYears","query","hideDate","yearOnly","postsByYear","useMemo","collection","forEach","post","year","years","Object","keys","reverse","map","BlogSidebar","useStaticQuery","categories","group","tags","filter","category","name","slugify","activeClassName","totalCount","tag","SidebarLayout","children","Blog","posts","edges","simplifiedPosts","getSimplifiedPosts","config","customDescription","Layout"],"sourceRoot":""}