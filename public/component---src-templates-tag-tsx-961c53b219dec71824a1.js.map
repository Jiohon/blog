{"version":3,"file":"component---src-templates-tag-tsx-961c53b219dec71824a1.js","mappings":"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","sources":["webpack://hushes/./src/components/Hero.tsx","webpack://hushes/./src/components/Posts.tsx","webpack://hushes/./src/components/SidebarLayout.tsx","webpack://hushes/./src/hooks/useGetTaxonomies.ts","webpack://hushes/./src/templates/tag.tsx"],"sourcesContent":["import React from 'react'\n\ninterface Props {\n  title: string\n  highlight?: number\n  subTitle?: string\n  children?: React.ReactNode\n  index?: boolean\n}\n\n/**\n * @description 大标题\n */\n\nexport const Hero = ({ highlight, subTitle, title, children, index }: Props) => {\n  return (\n    <header className={`hero ${index ? 'index' : ''}`}>\n      {subTitle && (\n        <div className=\"sub-title\">\n          {highlight && <span className=\"highlight\">{highlight}</span>}\n          {subTitle}\n        </div>\n      )}\n      {title && <h1>{title}</h1>}\n      {children && children}\n    </header>\n  )\n}\n","import { Link } from 'gatsby'\nimport React, { useMemo } from 'react'\n\n/**\n * @description 文章组件-item\n */\n\nconst Post = ({ node, prefix }: { node: SimplifiedData; prefix?: string }) => {\n  let formattedDate\n\n  if (node.date) {\n    const dateArr = node.date.split(' ')\n    dateArr.pop()\n\n    dateArr[0] = dateArr[0].slice(0, 3)\n    formattedDate = dateArr.join(' ').slice(0, -1)\n  }\n\n  return (\n    <Link to={prefix ? `/${prefix}${node.slug}` : node.slug} key={node.id} className=\"post\">\n      <h5>{node.title}</h5>\n      <time>{formattedDate}</time>\n    </Link>\n  )\n}\n\n/**\n * @description 文章列表\n */\n\nexport const Posts = ({ data = [], prefix }: { data: SimplifiedData[]; prefix?: string }) => {\n  const postsByYear = useMemo(() => {\n    const collection: YearListData = {}\n\n    data.forEach((post) => {\n      const year = post.date?.split(', ')[1]\n\n      collection[year] = [...(collection[year] || []), post]\n    })\n\n    return collection\n  }, [data])\n\n  const years = useMemo(() => Object.keys(postsByYear).reverse(), [postsByYear])\n\n  return (\n    <>\n      {years.map((year) => (\n        <section key={year} className=\"segment\">\n          <h2 className=\"year\">{year}</h2>\n          <div className=\"posts\">\n            {postsByYear[year].map((node: SimplifiedData) => (\n              <Post key={node.id} node={node} prefix={prefix} />\n            ))}\n          </div>\n        </section>\n      ))}\n    </>\n  )\n}\n","import { Link } from 'gatsby'\nimport React from 'react'\n\nimport { useGetTaxonomies } from '../hooks/useGetTaxonomies'\nimport { slugify } from '../utils/helpers'\n\ninterface Props {\n  children?: React.ReactNode\n}\n\n/**\n * @description 归档页面 - 侧边类别、标签信息\n */\n\nconst BlogSidebar = () => {\n  const data = useGetTaxonomies()\n  const categories = data.categories.group\n  const tags = data.tags.group\n\n  return (\n    <aside className=\"post-sidebar\">\n      <div className=\"post-sidebar-card\">\n        <h2>类别</h2>\n        <div className=\"list\">\n          {categories\n            .filter((category) => category.name !== 'Highlight')\n            .map((category) => {\n              return (\n                <Link\n                  key={category.name}\n                  to={`/categories/${slugify(category.name)}`}\n                  className=\"category\"\n                  activeClassName=\"active\"\n                >\n                  <div className=\"name\">{category.name}</div>\n                  <div className=\"count\">{category.totalCount}</div>\n                </Link>\n              )\n            })}\n        </div>\n      </div>\n\n      <div className=\"post-sidebar-card\">\n        <h2>标签</h2>\n        <div className=\"tags\">\n          {tags.map((tag) => {\n            return (\n              <Link key={tag.name} to={`/tags/${slugify(tag.name)}`} className=\"tag\" activeClassName=\"active\">\n                {tag.name}\n              </Link>\n            )\n          })}\n        </div>\n      </div>\n    </aside>\n  )\n}\n\n/**\n * @description 归档页面 - 布局\n */\n\nexport const SidebarLayout = ({ children }: Props) => {\n  return (\n    <section className=\"container markdown-content\">\n      <div className=\"grid\">\n        <div className=\"article-content\">{children}</div>\n        <div className=\"sidebar-content\">\n          <BlogSidebar />\n        </div>\n      </div>\n    </section>\n  )\n}\n","import { graphql, useStaticQuery } from 'gatsby'\n\nexport const useGetTaxonomies = (): SideData => {\n  const data = useStaticQuery(graphql`\n    query TaxonomyQuery {\n      tags: allMarkdownRemark {\n        group(field: frontmatter___tags) {\n          name: fieldValue\n          totalCount\n        }\n      }\n\n      categories: allMarkdownRemark {\n        group(field: frontmatter___categories) {\n          name: fieldValue\n          totalCount\n        }\n      }\n    }\n  `)\n\n  return data\n}\n","import { graphql } from 'gatsby'\nimport React, { useMemo } from 'react'\nimport Helmet from 'react-helmet'\n\nimport { Hero } from '../components/Hero'\nimport { Posts } from '../components/Posts'\nimport { SEO } from '../components/SEO'\nimport { SidebarLayout } from '../components/SidebarLayout'\nimport { Layout } from '../layout/index'\nimport { TagPageQuery } from '../typings/graphql-type'\nimport config from '../utils/config'\nimport { getSimplifiedPosts } from '../utils/helpers'\n\n/**\n * @description 标签 页面\n * @date 09/10/2022\n * @export\n * @param {*} { data, pageContext }\n * @return {*}\n */\nexport default function TagTemplate({ data, pageContext }: { data: TagPageQuery; pageContext: { tag: string } }) {\n  const { tag } = pageContext\n  const { totalCount } = data.allMarkdownRemark\n  const posts = data.allMarkdownRemark.edges\n  const simplifiedPosts = useMemo(() => getSimplifiedPosts(posts), [posts])\n  const message = totalCount === 1 ? ' post tagged:' : ' posts tagged:'\n\n  return (\n    <div>\n      <Helmet title={`Posts tagged: ${tag} | ${config.siteTitle}`} />\n      <SEO />\n\n      <SidebarLayout>\n        <Hero highlight={totalCount} subTitle={message} title={tag} />\n        <Posts data={simplifiedPosts} />\n      </SidebarLayout>\n    </div>\n  )\n}\n\nTagTemplate.Layout = Layout\n\nexport const pageQuery = graphql`\n  query TagPage($tag: String) {\n    allMarkdownRemark(\n      sort: { order: DESC, fields: [frontmatter___date] }\n      filter: { frontmatter: { tags: { in: [$tag] } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          id\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n            tags\n            categories\n          }\n        }\n      }\n    }\n  }\n`\n"],"names":["Hero","highlight","subTitle","title","children","index","React","className","Post","formattedDate","node","prefix","date","dateArr","split","pop","slice","join","Link","to","slug","key","id","Posts","data","postsByYear","useMemo","collection","forEach","post","year","_post$date","years","Object","keys","reverse","map","BlogSidebar","useStaticQuery","categories","group","tags","filter","category","name","slugify","activeClassName","totalCount","tag","SidebarLayout","TagTemplate","pageContext","allMarkdownRemark","posts","edges","simplifiedPosts","getSimplifiedPosts","message","Helmet","config","SEO","Layout"],"sourceRoot":""}